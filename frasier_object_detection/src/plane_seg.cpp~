/**
		ME5205: daVinci Group
		Advisor(s): Gregory Fischer
		object_seg.cpp
		Purpose: 
	
  @author Vanderlei Cunha Jr.
		@version 1.0 12/10/14
		@pkg

*/
#include <Fixtures/virtual_fixtures.h>
#include <Fixtures/plane_seg.h>

using namespace pcl;
using namespace std;
using namespace ros

void SACModelPlane(PointCloud<PointXYZRGB>::Ptr cloudPlane)
{
ModelCoefficients::Ptr coeff (new ModelCoefficients);
SACSegmentation<PointXYZRGB> PlaneSeg;
PointIndices::Ptr inlierIndices(new PointIndices);
ExtractIndices<PointXYZRGB> extractPlane;

PlaneSeg.setInputCloud(cloudPlane);
PlaneSeg.setModelType(SACMODEL_PLANE);
PlaneSeg.setMethodType(SAC_RANSAC);
PlaneSeg.setDistanceThreshold(SACMODEL_PLANE_THRESHOLD);
PlaneSeg.setOptimizeCoefficients(true);
PlaneSeg.segment(*inlierIndices, *coeff);

 if(inlierIndices->indices.size() == 0)
    std::cerr<<" Plane Not Found "<<std::endl;

 else
  {
    extractPlane.set

  }


}

void SACModelPerpendicularPlane(PointCloud<PointXYZRGB>::Ptr cloudPerpendicularPlane)
{

}

void PlaneSegmentationCallBack(const sensor_msgs::PointCloud2 &filteredCloud)
{

fromROSMsg(filteredCloud, *cloud);






//toROSMsg(*cloud,objectSegmented);
//publish_object.publish(objectSegmented);
}

int main (int argc, char** argv)
{

ros::init(argc, argv, "plane_seg_node");
ros::NodeHandle node;

subscribe_raw_data = node.subscribe("daVinci/Fixture/PassthroughFilter", 1, &PlaneSegmentationCallBack);
publish_plane = node.advertise<sensor_msgs::PointCloud2>("daVinci/Fixture/PlaneSegmentation",1);

ros::Rate loopRate(10);
while(ros::ok())
{
ros::spin();
loopRate.sleep();

}

return EXIT_SUCCESS;
}



