#
#include <Fixtures/virtual_fixtures.h>
#include <Fixtures/passthrough_filter.h>

using namespace pcl;
using namespace std;

void FilterCallBack(const sensor_msgs::PointCloud2 &rawcloud)
{

fromROSMsg(rawcloud, *cloud);


PassThrough<PointXYZRGB> filterCloud;
filterCloud.setInputCloud(cloud);
filterCloud.setFilterFieldName("z");
filterCloud.setFilterLimits(0.0, 2.0);
filterCloud.filter(*filter_cloud_object);

//Convert from PointCloud class to PointCloud2 msg
toROSMsg(*filter_cloud_object, filteredCloud);

publish_filter.publish(filteredCloud);


}

int main (int argc, char** argv)
{

ros::init(argc, argv, "passthrough_filter_node");
ros::NodeHandle node;

subscribe_raw_data = node.subscribe("/softkinetic_camera/depth/points", 1, &FilterCallBack);
publish_filter = node.advertise<sensor_msgs::PointCloud2>("daVinci/Fixture/PassthroughFilter",1);


ros::Rate loopRate(10);

while(ros::ok())
{
ros::spin();
loopRate.sleep();

}

return 0;
//return EXIT_SUCCESS;
}



